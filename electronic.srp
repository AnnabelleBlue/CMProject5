/////////////////////////////////////////////////////////////////////
//  Contributors: Matt, Stephanie
//
//
/////////////////////////////////////////////////////////////////////

require "noteheader"

class ElectronicAlgorithm
    var solo
    var drum
    var music
    var algo
    var lastBassNotePlayed // We need this to make sure we don't
                           // play the same thing twice in a row.

    def init(musicObj, soloinputObj, drumObj, algoObj)

        solo = soloinputObj
        music = musicObj
        drum = drumObj
        algo = algoObj
        var lastBassNotePlayed = music.getPitch(0) - 1

    // We pick a note randomly from the notes the soloist has supplied us,
    // and play it with a chance which is dependent on the weight of the drums
    // at that given section. The more drums are playing, the more chance we
    // have for the melody to play a note. This is what creates rhythm.
    // Contributors: Matt, Stephanie
    def melody(durationMultiplier)
        if ((len(solo.notesList)) != 0)
            if (random() < drum.getWeight(music.beat))
                var idx = round(random()*(len(solo.notesList) - 1))
                currentNote = solo.notesList[idx]
                currentNote.duration = int(16.0*(1.0-drum.getWeight(music.beat)) + .5)*durationMultiplier
                currentNote.velocity = algo.treble_vel
                return currentNote
        return Note(0, 0, 0)



    // Picks between the root, third, fifth, and seventh of our scale,
    // and plays one of them. The bass will only play when we change bars or
    // two beats before we change bars. We make sure to never play the same
    // note twice in a row.
    // Contributors: Matt, Stephanie
    def bass()
        var newPitch = lastBassNotePlayed
        while (newPitch == lastBassNotePlayed)
            x = random() // Random variable for cases
            if (x <= .5)
                newPitch = music.getPitch(0) - 24 // Root
            elif (x <= .7)
                newPitch = music.getPitch(2) - 24 // Third
            elif (x <= .9)
                newPitch = music.getPitch(4) - 24 // Fifth
            else
                newPitch = music.getPitch(6) - 24 // Seventh
        if ((music.beat%16) == 0) // If it's the beginning of a bar
            return Note(newPitch, algoObj.bass_vel, 16)
        elif ((music.beat%16) == 14) // If it's right before a new bar
            if (random() > .4)
                return Note(newPitch, algoObj.bass_vel, 4) // Play for shorter
            else
                return Note(0,0,0) // Or don't play
        return Note(0,0,0)
