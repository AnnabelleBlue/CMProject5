require "noteheader"

class ElectronicAlgorithm
	var solo
	var drum
	var music
	var lastBassNotePlayed
	
	def init(musicObj, soloinputObj, drumObj)

		solo = soloinputObj // Hopefully these are "aliases" to the given instance
		music = musicObj	// UPDATE: THEY ARE
		drum = drumObj
		var lastBassNotePlayed = music.scale[0] - 1

	def melody(durationMultiplier)
		// Random
		if ((len(solo.notesList)) != 0)
			if (random() < drum.getWeight(music.beat))
				var idx = round(random()*(len(solo.notesList) - 1))
				currentNote = solo.notesList[idx]
				currentNote.duration = int(16.0*(1.0-drum.getWeight(music.beat)) + .5)*durationMultiplier
				return currentNote
		return Note(0, 0, 0)


	def bass()
		// Still random
		if ((len(solo.notesList)) != 0)
			var newPitch = lastBassNotePlayed
			while (newPitch == lastBassNotePlayed)
				x = random() // Random variable for cases
				if (x <= .5)
					newPitch = music.scale[0] - 24 // Root
				elif (x <= .7)
					newPitch = music.scale[2] - 24 // Third
				elif (x <= .9)
					newPitch = music.scale[4] - 24 // Fifth
				else 
					newPitch = music.scale[6] - 24 // Seventh
			if ((music.beat%16) == 0) // If it's the beginning of a bar
				return Note(newPitch, 16, 100)
			elif ((music.beat%16) == 14) // If it's right before a new bar
				if (random() > .4)
					return Note(newPitch, 4, 100) // Play for shorter 
				else
					return Note(0,0,0) // Or don't play

		return Note(0, 0, 0)
