
require "drum_input.srp"

require "noteheader"
require "soloinput"
require "musicobj"
require "electronic"


////////////////////////
// Global definitions //
////////////////////////

soloObj = SoloistData()
musicObj = MusicData()
electronicAlgorithm = ElectronicAlgorithm(musicObj, soloObj)
drumObj = DrumData()

///////////////////////////////////////
//
//              Handlers
//
///////////////////////////////////////
inst = 0
vel = 110

// SOLOIST
def handle_8_push(path, isOn)
    display path, isOn
    
    // Sets note
    note = int(path[7])
    
    // If the note is double digits
    if len(path) == 9
        note = int(path[7] + path[8])
    
    note = note + 59
    
    // Turns note on or off
    if isOn > 0.5
    
        vtsched.start_use()
        midi_out.note_on(inst, note, vel)
        vtsched.finish_use()
    else
        vtsched.start_use()
        midi_out.note_on(inst, note, 0)
        vtsched.finish_use()
        
    // Adds note to algorithm input
    soloObj.addNote(Note(note, vel, 1))

    
// DRUM BEAT
def handle_2_multitoggle(path, isOn)
    x = int(path[17])
    y = int(path[15])
    offset = 0
    
    if len(path) == 19
        x = x * 10 + int(path[18])
  
    if int(y/2) == int((y-1)/2)
        offset = 16
    
    drumObj.drum_patterns[int((6-y)/2)][x - 1 + offset] = int(isOn)  
    display drumObj.drum_patterns
 
// ALGO SWITCHER / PARAMETER CONTROLLER
def handle_3_rotary(path, turn)
    display path, turn
    
// ALGO SWITCHER / PARAMETER CONTROLLER
def handle_3_toggle(path, isOn)
    display path, isOn
        
// PARAMETER CONTROLLER
def handle_2_push(path, isOn)
    display path, isOn
    
// PARAMETER CONTROLLER
def handle_3_push(path, isOn)
    display path, isOn
    
// PARAMETER CONTROLLER
def handle_3_fader(path, per)
    display path, per
    
///////////////////////////////////////
//
//          Server Methods
//
///////////////////////////////////////
def add_server_methods()
    // SOLOIST
    for i = 1 to 25
        osc_server_method("/8/push" + str(i), "f", nil, 'handle_8_push')
        
    // DRUM BEAT
    for i = 1 to 7
        for j = 1 to 17
            osc_server_method("/2/multitoggle/" + str(i) + "/" + str(j), "f", nil, 'handle_2_multitoggle')

    // ALGO SWITCHER
    for i = 1 to 7
        osc_server_method("/3/rotary" + str(i), "f", nil, 'handle_3_rotary')

    for i = 1 to 6
        osc_server_method("/3/toggle" + str(i), "f", nil, 'handle_3_toggle')
        
    // PARAMETER CONTROLLER
    for i = 1 to 13
        osc_server_method("/2/push" + str(i), "f", nil, 'handle_2_push')
        
    for i = 1 to 6
        osc_server_method("/3/fader" + str(i), "f", nil, 'handle_3_fader')
    
    for i = 1 to 5
        osc_server_method("/3/push" + str(i), "f", nil, 'handle_3_push')
        
