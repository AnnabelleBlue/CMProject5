///////////////////////////////////////////////////////////////
//  Contributors: Jasmine Peterson
//
//  This file handles reading from OSC and redirects to the 
//  appropriate data structures and functions.  
//
//  Notes: There is an overlap on OSC input devices.  To counteract
//  this, the first device touched is dedicated to being the control
//  for parameter input and the second device is for controlling
//  algorithm input.
//
////////////////////////////////////////////////////////////////

require "drum_input.srp"
require "noteheader"
require "soloinput"
require "musicobj"
require "electronic"
//require "scale"
require "algoobj"


////////////////////////
// Global definitions //
////////////////////////

soloObj = SoloistData()
musicObj = MusicData()
drumObj = DrumData()
algoObj = AlgoData()
electronicAlgorithm = ElectronicAlgorithm(musicObj, soloObj, drumObj, algoObj)

// There is an overlap between OSC inputs with devices.  The device controlling the 
// parameters must be pressed first in order to guarantee proper usage.
algo_device = 1
param_device = 0

///////////////////////////////////////
//
//              Handlers
//
///////////////////////////////////////

// SOLOIST
// Handles soloist input by adding the played
// note to musicObj to be played and to soloObj
// to seed the algorithm
// Contributors: Jasmine
def handle_8_push(path, isOn)
    display path, isOn
    
    // Sets note
    note = int(path[7])
    
    // If the note is double digits
    if len(path) == 9
        note = int(path[7] + path[8])
    
    // Finds pitch starting at middle C
    note = note + 59
    
    // Turns note on or off
    if isOn > 0.5
        musicObj.note_on = note
    else
        musicObj.note_off = note
        
    // Adds note to algorithm input
    soloObj.addNote(Note(note, 80, 4))

    
// DRUM BEAT
// Handles drum beat input by taking the drum index
// and adding the associated beat to the drum pattern
// Note that each drum line is 32 beats long spanning
// two rows of 16 index OSC input
// Contributors: Jasmine
def handle_2_multitoggle(path, isOn)
    // Finds coordinate of pushed button
    x = int(path[17])
    y = int(path[15])
    offset = 0
    
    // Combines path if index is two digits long
    if len(path) == 19
        x = x * 10 + int(path[18])
  
    // If input is from second line
    if int(y/2) == int((y-1)/2)
        offset = 16

    // Add input to drum pattern
    drumObj.drum_patterns[int((6-y)/2)][x - 1 + offset] = int(isOn)  
 
// ALGO SWITCHER 
// Controls the velocity of the bass and treble lines of the algorithm
// Contributors: Jasmine
def handle_3_rotary(path, turn)
    // Find device indicator and index from path
    var device = osc_server_reply()
    var index = int(path[9])
    
    // If we are using the correct device
    if device == algo_device
        if index == 1
            algoObj.bass_vel = int(turn * 127)
        elif index == 2
            algoObj.treble_vel = int(turn * 127)
        display algoObj.bass_vel, algoObj.treble_vel
    
toggles = [0,0,0]
// ALGO SWITCHER / PARAMETER CONTROLLER
// Contributors: Jasmine
def handle_3_toggle(path, isOn)
    // Device indicator
    var device = osc_server_reply()
    var flip = int(isOn)
    var index = int(path[9]) - 1
    
    // Determines choice of musical instrument based on binary 
    // representation of toggles
    if device == param_device
        toggles[index] = flip
        
        // Picks instrument
        instrument = musicObj.inst_list[toggles[0] + (toggles[1] * 2) + (toggles[2] * 4)]
        
        // Sets instrument
        vtsched.start_use()
        midi_out.program(0, instrument)
        vtsched.finish_use()
        
        // Sets object instrument for future use
        musicObj.instrument = instrument
        display "DEVICE 0", toggles, musicObj.instrument
    // Turns on and off various parts of the algorithm
    else
        if index == 0
            algoObj.arpeggio1On = flip
        elif index == 1
            algoObj.arpeggio2On = flip
        else 
            algoObj.electronicOn = flip
        display "DEVICE 1", path, isOn

    display path, isOn
        
// PARAMETER CONTROLLER
// Change Key based on keyboard input
// Contributors: Jasmine
def handle_2_push(path, isOn)
    // Sets key to new key
    musicObj.root = 59 + int(path[7])
    
    // Drops algorithm seed to change to new key
    soloObj.notesList = []
    
// PARAMETER CONTROLLER
// Change volume/velocity of soloist and drums
// Contributors: Jasmine, Richard
def handle_3_fader(path, val)
    // Finds which velocity to change 
    var index = int(path[8])

    // Changes velocity
    if index == 2
        soloObj.velocity = int(127 * val)
    elif index == 3
        drumObj.velocity = int(127 * val)
    display path, val

// PARAMETER CONTROLLER
// Change Major / Minor
// Contributors: Jasmine
def handle_3_push(path, isOn)
    var index = int(path[7])
    
    // If a red button has eben pushed
    if (index - 2) <= 0
        musicObj.isMaj = 0
    // If a green button has been pushed
    else
        musicObj.isMaj = 1
        
    // Reseeds algorithm with new information
    soloObj.notesList = []
    


        
///////////////////////////////////////
//
//          Server Methods
//
///////////////////////////////////////
// Contributors: Jasmine
def add_server_methods()
    // SOLOIST
    for i = 1 to 25
        osc_server_method("/8/push" + str(i), "f", nil, 'handle_8_push')
        
    // DRUM BEAT
    for i = 1 to 7
        for j = 1 to 17
            osc_server_method("/2/multitoggle/" + str(i) + "/" + str(j), "f", nil, 'handle_2_multitoggle')

    // ALGO SWITCHER
    for i = 1 to 7
        osc_server_method("/3/rotary" + str(i), "f", nil, 'handle_3_rotary')

    for i = 1 to 6
        osc_server_method("/3/toggle" + str(i), "f", nil, 'handle_3_toggle')
        
    // PARAMETER CONTROLLER
    for i = 1 to 13
        osc_server_method("/2/push" + str(i), "f", nil, 'handle_2_push')
        
    for i = 1 to 6
        osc_server_method("/3/fader" + str(i), "f", nil, 'handle_3_fader')
    
    for i = 1 to 5
        osc_server_method("/3/push" + str(i), "f", nil, 'handle_3_push')
        
