class MusicData
    var beat
    var maj_scale
    var min_scale
    var root
    var isMaj
    var volume
    var tempo
    var instrument
    var inst_list
    var activeNotesList
    var note_on
    var note_off
    
    def init()
        beat = 0
        // scale starts on c major
        maj_scale = [0, 2, 4, 5, 7, 9, 11, 12]
        root = 60
        isMaj = true
        min_scale = []
        volume = 1
        tempo = 320 // bpm
        inst_list = [11, 114, 95, 97, 12, 76, 8, 7]
        instrument = 11
        activeNotesList = []
        note_on = 0
        note_off = 0
        
    def addNote(note, midiout)
        if (note == nil or note.pitch == 0)
            return
        var addedNoteBool = false
        for i = 0 to len(activeNotesList)
            currentNote = activeNotesList[i]
            if (currentNote.pitch == note.pitch)
                // Deletes note
                activeNotesList.uninsert(i)
                midiout.note_on(144, note.pitch, 0)
                // Adds note
                activeNotesList.insert(0, note)
                midiout.note_on(144, note.pitch, note.velocity)//round(note.velocity*volume))
                addedNoteBool = true
        if (not addedNoteBool)
            activeNotesList.insert(0, note)
            midiout.note_on(144, note.pitch, note.velocity)//round(note.velocity*volume))


    def update(midiout)
        beat = beat + 1
        if (len(activeNotesList) == 0)
            return
        var i = 0
        while (i < len(activeNotesList))
            currentNote = activeNotesList[i]
            currentNote.update()

            if (currentNote.duration == 0)
                // Turns off note
                activeNotesList.uninsert(i)
                midiout.note_on(144, currentNote.pitch, 0)
            i = i + 1
        return
        
    def getPitch(index)
        if isMaj
            return maj_scale[index] + root
        else
            return min_scale[index] + root




