/////////////////////////////////////////////////////////////////////
//  Contributors: Matt, Jasmine
//
//  This file contains all general information about the system
//  performing such as underlying key, tempo, volume, the beat index,
//  etc.
//
/////////////////////////////////////////////////////////////////////


class MusicData
    var beat            // the beat we are on, 32 beat loop
    var maj_scale       // The underlying major scale
    var min_scale       // The underlying minor scale
    var root            // The root of our key
    var isMaj           // Maj/min switch
    var volume
    var tempo
    var instrument      // The choice of soloist instrument
    var inst_list       // All instrument choices
    var activeNotesList // Notes that need to be played and are playing
    var note_on         // If a note needs to be turned on
    var note_off        // If a note needs to be turned off

    // Contributors: Matt, Jasmine
    def init()
        beat = 0
        // scale starts on c major
        maj_scale = [0, 2, 4, 5, 7, 9, 11, 12]
        root = 60
        isMaj = true
        min_scale = [0, 2, 3, 5, 7, 8, 11, 12]
        volume = 1
        tempo = 320 // bpm
        inst_list = [11, 114, 95, 97, 12, 76, 8, 7]
        instrument = 11
        activeNotesList = []
        note_on = 0
        note_off = 0

    // Add a note to our list. If the pitch is already there,
    // replay the note and set the duration to the max of the
    // two notes.
    // Contributors: Matt
    def addNote(note, midiout)
        if (note == nil or note.pitch == 0)
            return
        var addedNoteBool = false
        for i = 0 to len(activeNotesList)
            currentNote = activeNotesList[i]
            if (currentNote.pitch == note.pitch)
                // Deletes note
                activeNotesList.uninsert(i)
                midiout.note_on(144, note.pitch, 0)
                // Adds note
                activeNotesList.insert(0, note)
                midiout.note_on(144, note.pitch, note.velocity)
                addedNoteBool = true
        if (not addedNoteBool)
            activeNotesList.insert(0, note)
            midiout.note_on(144, note.pitch, note.velocity)

    // Update each note in our activeNotesList, lowering the "duration".
    // If the note's duration is zero, extract it from the list.
    // Contributors: Matt
    def update(midiout)
        beat = beat + 1
        if (len(activeNotesList) == 0)
            return
        var i = 0
        while (i < len(activeNotesList))
            currentNote = activeNotesList[i]
            currentNote.update()

            if (currentNote.duration == 0)
                // Turns off note
                activeNotesList.uninsert(i)
                midiout.note_on(144, currentNote.pitch, 0)
            i = i + 1
        return

    // Contributors: Jasmine
    def setTempo(val)
    	tempo = val
    	vtsched.set_bpm(val)
    	display tempo

    // Contributors: Jasmine
    def getPitch(index)
        if isMaj
            return maj_scale[index] + root
        else
            return min_scale[index] + root




